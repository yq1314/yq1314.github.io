<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线性表的基本操作，C++实现</title>
      <link href="/2020/05/10/linetable/"/>
      <url>/2020/05/10/linetable/</url>
      
        <content type="html"><![CDATA[<p>数据对象在计算机中的存储表示称为数据的存储结构，也称为物理结构。把数据对象存储到计算机时，通常要求既要存储各数据元素的数据，又要存储数据元素之间的逻辑关系，数据元素在计算机内用一个结点来表示。数据元素在计算机中有两种基本的存储结构，分别是顺序存储结构和链式存储结构。<br>这里给出的是顺序表的实现。</p><h3 id="构造相应结构体："><a href="#构造相应结构体：" class="headerlink" title="构造相应结构体："></a>构造相应结构体：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> Sqlist<span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token operator">*</span>elem<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存放结点</span>    <span class="token keyword">int</span> Length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//表长度</span>    <span class="token keyword">int</span> listsize<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//最大长度</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="对顺序表进行初始化操作："><a href="#对顺序表进行初始化操作：" class="headerlink" title="对顺序表进行初始化操作："></a>对顺序表进行初始化操作：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Initlist</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化</span><span class="token punctuation">{</span>    L<span class="token punctuation">.</span>elem<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>List_Init_Size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态分配内存</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果动态分配内存失败，则进行下面操作</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"Overflow!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>Length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>listsize<span class="token operator">=</span>List_Init_Size<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="创建顺序表："><a href="#创建顺序表：" class="headerlink" title="创建顺序表："></a>创建顺序表：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Create</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建顺序表</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>num<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入顺序表元素个数："</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>num<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>Length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"创建顺序表成功！"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="求直接前驱："><a href="#求直接前驱：" class="headerlink" title="求直接前驱："></a>求直接前驱：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">PriorElem</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">,</span><span class="token keyword">long</span> pur_e<span class="token punctuation">,</span><span class="token keyword">long</span> pre_e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求前驱</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//申请两个新结点，用于下面操作</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//遍历整个顺序表找到要求前驱的元素，为下面求前驱做准备</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pur_e<span class="token operator">==</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>            p<span class="token operator">=</span><span class="token operator">&amp;</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//将该结点的地址赋给p，也可将该方法参数改为引用传递则可省去&amp;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//顺序表中无该元素</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"你输入的元素不合法，请重新输入！"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cin<span class="token operator">>></span>pur_e<span class="token punctuation">;</span>        <span class="token function">PriorElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>pur_e<span class="token punctuation">,</span>pre_e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>Length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//顺序表为空</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"线性表中无数据！"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span>p<span class="token number">-1</span><span class="token punctuation">;</span>        pre_e<span class="token operator">=</span><span class="token operator">*</span>q<span class="token punctuation">;</span>        <span class="token keyword">return</span> pre_e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="求直接后继："><a href="#求直接后继：" class="headerlink" title="求直接后继："></a>求直接后继：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">NextElem</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">,</span><span class="token keyword">long</span> pur_e<span class="token punctuation">,</span><span class="token keyword">long</span> next_e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求后继</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>Length<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pur_e<span class="token operator">==</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p<span class="token operator">=</span><span class="token operator">&amp;</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"你输入的元素不合法，请重新输入！"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cin<span class="token operator">>></span>pur_e<span class="token punctuation">;</span>        <span class="token function">NextElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>pur_e<span class="token punctuation">,</span>next_e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>Length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"线性表中无数据！"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        next_e<span class="token operator">=</span><span class="token operator">*</span>q<span class="token punctuation">;</span>        <span class="token keyword">return</span> next_e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="插入："><a href="#插入：" class="headerlink" title="插入："></a>插入：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">InsertElem</span><span class="token punctuation">(</span>Sqlist<span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">long</span> e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//插入</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>Length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> error<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//位置不合法返回-1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>Length<span class="token operator">==</span>L<span class="token punctuation">.</span>listsize<span class="token punctuation">)</span>        <span class="token keyword">return</span> error<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//超出表长返回-1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>L<span class="token punctuation">.</span>Length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>    <span class="token operator">++</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>    <span class="token keyword">return</span> right<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成功插入返回1</span><span class="token punctuation">}</span></code></pre><h3 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">DeleteElem</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>        <span class="token keyword">return</span> error<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//未分配好返回-1</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>        <span class="token keyword">return</span> error<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//位置不合法返回-1</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>Length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token operator">--</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>            <span class="token keyword">return</span> right<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成功删除返回1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="判断表是否为空"><a href="#判断表是否为空" class="headerlink" title="判断表是否为空"></a>判断表是否为空</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">EmptyList</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断表是否为空</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>Length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"线性表为空"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"线性表非空"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">LengthList</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求表长</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> L<span class="token punctuation">.</span>Length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TraverList</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>L<span class="token punctuation">.</span>Length<span class="token number">-1</span><span class="token punctuation">)</span>            cout<span class="token operator">&lt;&lt;</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout<span class="token operator">&lt;&lt;</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">","</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="遍历顺序表中元素："><a href="#遍历顺序表中元素：" class="headerlink" title="遍历顺序表中元素："></a>遍历顺序表中元素：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">TraverList</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>L<span class="token punctuation">.</span>Length<span class="token number">-1</span><span class="token punctuation">)</span>            cout<span class="token operator">&lt;&lt;</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout<span class="token operator">&lt;&lt;</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">","</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="还有一些其他的小操作这里不再赘述"><a href="#还有一些其他的小操作这里不再赘述" class="headerlink" title="还有一些其他的小操作这里不再赘述"></a>还有一些其他的小操作这里不再赘述</h3><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> List_Init_Size 50</span><span class="token macro property">#<span class="token directive keyword">define</span> error -1</span><span class="token macro property">#<span class="token directive keyword">define</span> right 1</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> Sqlist<span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token operator">*</span>elem<span class="token punctuation">;</span>    <span class="token keyword">int</span> Length<span class="token punctuation">;</span>    <span class="token keyword">int</span> listsize<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Initlist</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化</span><span class="token punctuation">{</span>    L<span class="token punctuation">.</span>elem<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>List_Init_Size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"Overflow!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>Length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>listsize<span class="token operator">=</span>List_Init_Size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Create</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建顺序表</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>num<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入顺序表元素个数："</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>num<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>Length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"创建顺序表成功！"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ClearList</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//清空顺序表</span><span class="token punctuation">{</span>    L<span class="token punctuation">.</span>Length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"已清空线性表"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">EmptyList</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断表是否为空</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>Length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"线性表为空"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"线性表非空"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">LengthList</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求表长</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> L<span class="token punctuation">.</span>Length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TraverList</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>L<span class="token punctuation">.</span>Length<span class="token number">-1</span><span class="token punctuation">)</span>            cout<span class="token operator">&lt;&lt;</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout<span class="token operator">&lt;&lt;</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">","</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//取元素</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>    <span class="token punctuation">{</span>         cout<span class="token operator">&lt;&lt;</span><span class="token string">"位置不合法，请重新输入！"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>         cin<span class="token operator">>></span>i<span class="token punctuation">;</span>         <span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        cout<span class="token operator">&lt;&lt;</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">,</span><span class="token keyword">long</span> e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定位</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">==</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回从开始遍历到的第一个该元素位置</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>        <span class="token keyword">return</span> error<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不存在则返回-1</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">PriorElem</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">,</span><span class="token keyword">long</span> pur_e<span class="token punctuation">,</span><span class="token keyword">long</span> pre_e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求前驱</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pur_e<span class="token operator">==</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p<span class="token operator">=</span><span class="token operator">&amp;</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"你输入的元素不合法，请重新输入！"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cin<span class="token operator">>></span>pur_e<span class="token punctuation">;</span>        <span class="token function">PriorElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>pur_e<span class="token punctuation">,</span>pre_e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>Length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"线性表中无数据！"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span>p<span class="token number">-1</span><span class="token punctuation">;</span>        pre_e<span class="token operator">=</span><span class="token operator">*</span>q<span class="token punctuation">;</span>        <span class="token keyword">return</span> pre_e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">NextElem</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">,</span><span class="token keyword">long</span> pur_e<span class="token punctuation">,</span><span class="token keyword">long</span> next_e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求后继</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>Length<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pur_e<span class="token operator">==</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p<span class="token operator">=</span><span class="token operator">&amp;</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"你输入的元素不合法，请重新输入！"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cin<span class="token operator">>></span>pur_e<span class="token punctuation">;</span>        <span class="token function">NextElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>pur_e<span class="token punctuation">,</span>next_e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>Length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"线性表中无数据！"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        next_e<span class="token operator">=</span><span class="token operator">*</span>q<span class="token punctuation">;</span>        <span class="token keyword">return</span> next_e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">InsertElem</span><span class="token punctuation">(</span>Sqlist<span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">long</span> e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//插入</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>Length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> error<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//位置不合法返回-1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>Length<span class="token operator">==</span>L<span class="token punctuation">.</span>listsize<span class="token punctuation">)</span>        <span class="token keyword">return</span> error<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//超出表长返回-1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>L<span class="token punctuation">.</span>Length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>    <span class="token operator">++</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>    <span class="token keyword">return</span> right<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成功插入返回1</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">DeleteElem</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>        <span class="token keyword">return</span> error<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//未分配好返回-1</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>        <span class="token keyword">return</span> error<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//位置不合法返回-1</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>Length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token operator">--</span>L<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>            <span class="token keyword">return</span> right<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成功删除返回1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Sqlist L<span class="token punctuation">;</span>    <span class="token function">Initlist</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化线性表</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">bool</span> b<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> e1<span class="token punctuation">,</span>e2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"      0、创建线性表       "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"      1、清空线性表       "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"      2、判断线性表是否为空       "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"      3、求线性表长度       "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"      4、获取线性表指定位置元素      "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"      5、求前驱      "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"      6、求后继       "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"      7、在线性表指定位置插入元素      "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"      8、删除线性表指定位置元素       "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"      9、显示线性表       "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"      10、定位线性表中某元素位置       "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"          退出，输入非上述数字！       "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入操作代码："</span><span class="token punctuation">;</span>        cin<span class="token operator">>></span>n<span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token function">Create</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">ClearList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token function">EmptyList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"线性表长度为："</span><span class="token operator">&lt;&lt;</span><span class="token function">LengthList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入要获取元素的位置："</span><span class="token punctuation">;</span>                   cin<span class="token operator">>></span>i<span class="token punctuation">;</span>                   <span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入要求直接前驱的元素："</span><span class="token punctuation">;</span>                   cin<span class="token operator">>></span>e1<span class="token punctuation">;</span>                   cout<span class="token operator">&lt;&lt;</span><span class="token string">"其前驱为："</span><span class="token operator">&lt;&lt;</span><span class="token function">PriorElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入要求直接后继的元素："</span><span class="token punctuation">;</span>                   cin<span class="token operator">>></span>e1<span class="token punctuation">;</span>                   cout<span class="token operator">&lt;&lt;</span><span class="token string">"其后继为："</span><span class="token operator">&lt;&lt;</span><span class="token function">NextElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入要插入元素的位置和插入元素："</span><span class="token punctuation">;</span>                   cin<span class="token operator">>></span>i<span class="token operator">>></span>e1<span class="token punctuation">;</span>                   cout<span class="token operator">&lt;&lt;</span><span class="token function">InsertElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e1<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入要删除元素的位置："</span><span class="token punctuation">;</span>                   cin<span class="token operator">>></span>i<span class="token punctuation">;</span>                   cout<span class="token operator">&lt;&lt;</span><span class="token function">DeleteElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"线性表中的元素为："</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                   <span class="token function">TraverList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入要查找位置的元素："</span><span class="token punctuation">;</span>                    cin<span class="token operator">>></span>e1<span class="token punctuation">;</span>                    cout<span class="token operator">&lt;&lt;</span><span class="token string">"其位置为："</span><span class="token operator">&lt;&lt;</span><span class="token function">LocateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>e1<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span> <span class="token operator">:</span>b<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用以退出循环</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性表的基本操作 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/25/hello_world/"/>
      <url>/2020/04/25/hello_world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
